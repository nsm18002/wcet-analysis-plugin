/**
 */
package customUMLRT.provider;

import customUMLRT.util.CustomUMLRTAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CustomUMLRTItemProviderAdapterFactory extends CustomUMLRTAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CustomUMLRTItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.Signal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignalItemProvider signalItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.Signal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignalAdapter() {
		if (signalItemProvider == null) {
			signalItemProvider = new SignalItemProvider(this);
		}

		return signalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.Capsule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapsuleItemProvider capsuleItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.Capsule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapsuleAdapter() {
		if (capsuleItemProvider == null) {
			capsuleItemProvider = new CapsuleItemProvider(this);
		}

		return capsuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.Port} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortItemProvider portItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.Port}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortAdapter() {
		if (portItemProvider == null) {
			portItemProvider = new PortItemProvider(this);
		}

		return portItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.StateMachine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateMachineItemProvider stateMachineItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.StateMachine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateMachineAdapter() {
		if (stateMachineItemProvider == null) {
			stateMachineItemProvider = new StateMachineItemProvider(this);
		}

		return stateMachineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.StateEntryEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateEntryEventItemProvider stateEntryEventItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.StateEntryEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateEntryEventAdapter() {
		if (stateEntryEventItemProvider == null) {
			stateEntryEventItemProvider = new StateEntryEventItemProvider(this);
		}

		return stateEntryEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.TransitionEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionEventItemProvider transitionEventItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.TransitionEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionEventAdapter() {
		if (transitionEventItemProvider == null) {
			transitionEventItemProvider = new TransitionEventItemProvider(this);
		}

		return transitionEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.StateExitEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateExitEventItemProvider stateExitEventItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.StateExitEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateExitEventAdapter() {
		if (stateExitEventItemProvider == null) {
			stateExitEventItemProvider = new StateExitEventItemProvider(this);
		}

		return stateExitEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.Subcapsule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubcapsuleItemProvider subcapsuleItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.Subcapsule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubcapsuleAdapter() {
		if (subcapsuleItemProvider == null) {
			subcapsuleItemProvider = new SubcapsuleItemProvider(this);
		}

		return subcapsuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.TempMachine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TempMachineItemProvider tempMachineItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.TempMachine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTempMachineAdapter() {
		if (tempMachineItemProvider == null) {
			tempMachineItemProvider = new TempMachineItemProvider(this);
		}

		return tempMachineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.Protocol} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProtocolItemProvider protocolItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.Protocol}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProtocolAdapter() {
		if (protocolItemProvider == null) {
			protocolItemProvider = new ProtocolItemProvider(this);
		}

		return protocolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.Connector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectorItemProvider connectorItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.Connector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectorAdapter() {
		if (connectorItemProvider == null) {
			connectorItemProvider = new ConnectorItemProvider(this);
		}

		return connectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.DefaultState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefaultStateItemProvider defaultStateItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.DefaultState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefaultStateAdapter() {
		if (defaultStateItemProvider == null) {
			defaultStateItemProvider = new DefaultStateItemProvider(this);
		}

		return defaultStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.Trigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerItemProvider triggerItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.Trigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerAdapter() {
		if (triggerItemProvider == null) {
			triggerItemProvider = new TriggerItemProvider(this);
		}

		return triggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.InitialTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialTransitionItemProvider initialTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.InitialTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialTransitionAdapter() {
		if (initialTransitionItemProvider == null) {
			initialTransitionItemProvider = new InitialTransitionItemProvider(this);
		}

		return initialTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.sendSignal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected sendSignalItemProvider sendSignalItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.sendSignal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createsendSignalAdapter() {
		if (sendSignalItemProvider == null) {
			sendSignalItemProvider = new sendSignalItemProvider(this);
		}

		return sendSignalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.WData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WDataItemProvider wDataItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.WData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWDataAdapter() {
		if (wDataItemProvider == null) {
			wDataItemProvider = new WDataItemProvider(this);
		}

		return wDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.WcetLookup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WcetLookupItemProvider wcetLookupItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.WcetLookup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWcetLookupAdapter() {
		if (wcetLookupItemProvider == null) {
			wcetLookupItemProvider = new WcetLookupItemProvider(this);
		}

		return wcetLookupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.portSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected portSetItemProvider portSetItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.portSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createportSetAdapter() {
		if (portSetItemProvider == null) {
			portSetItemProvider = new portSetItemProvider(this);
		}

		return portSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.LookupSignal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LookupSignalItemProvider lookupSignalItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.LookupSignal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLookupSignalAdapter() {
		if (lookupSignalItemProvider == null) {
			lookupSignalItemProvider = new LookupSignalItemProvider(this);
		}

		return lookupSignalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.voPair} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected voPairItemProvider voPairItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.voPair}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createvoPairAdapter() {
		if (voPairItemProvider == null) {
			voPairItemProvider = new voPairItemProvider(this);
		}

		return voPairItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link customUMLRT.outSignal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected outSignalItemProvider outSignalItemProvider;

	/**
	 * This creates an adapter for a {@link customUMLRT.outSignal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createoutSignalAdapter() {
		if (outSignalItemProvider == null) {
			outSignalItemProvider = new outSignalItemProvider(this);
		}

		return outSignalItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelItemProvider != null)
			modelItemProvider.dispose();
		if (signalItemProvider != null)
			signalItemProvider.dispose();
		if (capsuleItemProvider != null)
			capsuleItemProvider.dispose();
		if (portItemProvider != null)
			portItemProvider.dispose();
		if (stateMachineItemProvider != null)
			stateMachineItemProvider.dispose();
		if (stateItemProvider != null)
			stateItemProvider.dispose();
		if (transitionItemProvider != null)
			transitionItemProvider.dispose();
		if (stateEntryEventItemProvider != null)
			stateEntryEventItemProvider.dispose();
		if (transitionEventItemProvider != null)
			transitionEventItemProvider.dispose();
		if (stateExitEventItemProvider != null)
			stateExitEventItemProvider.dispose();
		if (subcapsuleItemProvider != null)
			subcapsuleItemProvider.dispose();
		if (tempMachineItemProvider != null)
			tempMachineItemProvider.dispose();
		if (protocolItemProvider != null)
			protocolItemProvider.dispose();
		if (connectorItemProvider != null)
			connectorItemProvider.dispose();
		if (defaultStateItemProvider != null)
			defaultStateItemProvider.dispose();
		if (triggerItemProvider != null)
			triggerItemProvider.dispose();
		if (initialTransitionItemProvider != null)
			initialTransitionItemProvider.dispose();
		if (sendSignalItemProvider != null)
			sendSignalItemProvider.dispose();
		if (wDataItemProvider != null)
			wDataItemProvider.dispose();
		if (wcetLookupItemProvider != null)
			wcetLookupItemProvider.dispose();
		if (portSetItemProvider != null)
			portSetItemProvider.dispose();
		if (lookupSignalItemProvider != null)
			lookupSignalItemProvider.dispose();
		if (voPairItemProvider != null)
			voPairItemProvider.dispose();
		if (outSignalItemProvider != null)
			outSignalItemProvider.dispose();
	}

}
